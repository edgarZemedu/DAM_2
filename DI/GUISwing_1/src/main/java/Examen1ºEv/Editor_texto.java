/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Examen1ÂºEv;

import Segundo.jtoolbar;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.InputMap;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.rtf.RTFEditorKit;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author A C E R
 */
public class Editor_texto extends javax.swing.JFrame {

    /**
     * Creates new form Editor_texto
     */
    public Editor_texto() {
        bold = false;
        italics = false;

        initComponents();

        undo = new UndoManager();
        addUndoManager(undo, jTextPane);

        //rehacer = new UndoManager();
        //addUndoManager(rehacer, jTextPane);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane = new javax.swing.JScrollPane();
        jTextPane = new javax.swing.JTextPane();
        jToolBar1 = new javax.swing.JToolBar();
        bDeshacer = new javax.swing.JButton();
        bRehacer = new javax.swing.JButton();
        bColor = new javax.swing.JButton();
        jLabelFont = new javax.swing.JLabel();
        cbFont = new javax.swing.JComboBox<>();
        jLabelSize = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        rbCursiva = new javax.swing.JRadioButton();
        rbNegrita = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        bConcatenar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNuevo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemGuardar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuIndex = new javax.swing.JMenu();
        jMenuItemX = new javax.swing.JMenuItem();
        jMenuItemX2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemD = new javax.swing.JMenuItem();
        jMenuItemR = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextPane.setPreferredSize(new java.awt.Dimension(400, 300));
        jScrollPane.setViewportView(jTextPane);

        jToolBar1.setRollover(true);
        jToolBar1.setPreferredSize(new java.awt.Dimension(573, 34));

        bDeshacer.setText("D");
        bDeshacer.setFocusable(false);
        bDeshacer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bDeshacer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeshacerActionPerformed(evt);
            }
        });
        jToolBar1.add(bDeshacer);

        bRehacer.setText("R");
        bRehacer.setFocusable(false);
        bRehacer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bRehacer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bRehacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRehacerActionPerformed(evt);
            }
        });
        jToolBar1.add(bRehacer);

        bColor.setText("Select Color");
        bColor.setFocusable(false);
        bColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bColorActionPerformed(evt);
            }
        });
        jToolBar1.add(bColor);

        jLabelFont.setText("Font");
        jToolBar1.add(jLabelFont);

        cbFont.setModel(new DefaultComboBoxModel(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()));
        cbFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFontActionPerformed(evt);
            }
        });
        jToolBar1.add(cbFont);

        jLabelSize.setText("Size");
        jToolBar1.add(jLabelSize);

        jSlider1.setMinimum(1);
        jSlider1.setPreferredSize(new java.awt.Dimension(150, 16));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jSlider1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jSlider1KeyReleased(evt);
            }
        });
        jToolBar1.add(jSlider1);

        rbCursiva.setText("Italics");
        rbCursiva.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        rbCursiva.setMaximumSize(new java.awt.Dimension(72, 28));
        rbCursiva.setMinimumSize(new java.awt.Dimension(72, 28));
        rbCursiva.setPreferredSize(new java.awt.Dimension(65, 28));
        rbCursiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCursivaActionPerformed(evt);
            }
        });
        jToolBar1.add(rbCursiva);

        rbNegrita.setText("Bold");
        rbNegrita.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        rbNegrita.setMaximumSize(new java.awt.Dimension(72, 28));
        rbNegrita.setMinimumSize(new java.awt.Dimension(72, 28));
        rbNegrita.setPreferredSize(new java.awt.Dimension(57, 27));
        rbNegrita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNegritaActionPerformed(evt);
            }
        });
        jToolBar1.add(rbNegrita);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("V");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("^");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        bConcatenar.setText("Concatenar");
        bConcatenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConcatenarActionPerformed(evt);
            }
        });

        jMenuFile.setText("File");

        jMenuItemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemNuevo.setText("New");
        jMenuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuevoActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemNuevo);

        jMenuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemAbrir.setText("Open");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemAbrir);

        jMenuItemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemGuardar.setText("Save as");
        jMenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGuardarActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemGuardar);
        jMenuFile.add(jSeparator2);

        jMenuIndex.setText("Index");

        jMenuItemX.setText("Users");
        jMenuIndex.add(jMenuItemX);

        jMenuItemX2.setText("Products");
        jMenuIndex.add(jMenuItemX2);

        jMenuFile.add(jMenuIndex);
        jMenuFile.add(jSeparator1);

        jMenuItemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemSalir.setText("Exit");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSalir);

        jMenuBar1.add(jMenuFile);

        jMenuEdit.setText("Edit");
        jMenuEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuEditActionPerformed(evt);
            }
        });

        jMenuItemD.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemD.setText("Desahacer");
        jMenuItemD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemD);

        jMenuItemR.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemR.setText("Rehacer");
        jMenuItemR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemR);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("CorFondo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItem1);

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jCheckBoxMenuItem1.setText("enabled");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenuEdit.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bConcatenar)
                .addGap(190, 190, 190)
                .addComponent(jButton2)
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(bConcatenar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //deshacer
    private void addUndoManager(UndoManager um, javax.swing.JTextPane tp) {

        Document documento = jTextPane.getDocument();
        documento.addUndoableEditListener(um);

    }

    private void cbFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFontActionPerformed
        jTextPane.setFont(new Font(cbFont.getSelectedItem().toString(), Font.PLAIN, jSlider1.getValue()));

    }//GEN-LAST:event_cbFontActionPerformed

    Color oldColor;
    private void bColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bColorActionPerformed

        String[] opcion = new String[2];
        opcion[0] = "Colorear la letra";
        opcion[1] = "Colorear el fondo";

        Object inputOpcion = JOptionPane.showInputDialog(null, "Seleccion que opciÃ³n prefiera", "OpciÃ³n de tu gusto", JOptionPane.QUESTION_MESSAGE, null, opcion, "Elige");

        if (inputOpcion != null) {
            if (inputOpcion == opcion[0]) {
                Color newColor;
                newColor = JColorChooser.showDialog(this, "Selecciona un color", oldColor);
                if (newColor != null) {
                    oldColor = newColor;
                    jTextPane.setForeground(oldColor);
                }
            } else if (inputOpcion == opcion[1]) {
                Color newColor = null;
                newColor = JColorChooser.showDialog(this, "Selecciona un color", oldColor);
                if (newColor != null) {
                    oldColor = newColor;
                    jTextPane.setBackground(oldColor);
                }
            }
        }
    }//GEN-LAST:event_bColorActionPerformed


    private void bDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeshacerActionPerformed
        try {
            if (undo.canUndo()) {
                undo.undo();
            }
        } catch (CannotUndoException exp) {
            exp.printStackTrace();
        }
    }//GEN-LAST:event_bDeshacerActionPerformed


    private void jMenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevoActionPerformed
        jTextPane.setText("");
    }//GEN-LAST:event_jMenuItemNuevoActionPerformed

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed

        JFileChooser file = new JFileChooser();
        TextFilter filter = new TextFilter();
        file.setFileFilter(filter);

        String nombreFile = "";

        if (file.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            nombreFile = file.getSelectedFile().getAbsolutePath();
        } else {
            return;
        }

        RTFEditorKit rtf = new RTFEditorKit();
        try {
            FileInputStream fis = new FileInputStream(nombreFile);
            rtf.read(fis, jTextPane.getDocument(), 0);

        } catch (Exception e) {
            System.out.println("Error: " + e.toString());
        }

    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jMenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGuardarActionPerformed
        JFileChooser file = new JFileChooser();
        TextFilter filter = new TextFilter();

        file.setFileFilter(filter);
        String nombreFile = "";

        if (file.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            //devuelve path del file
            nombreFile = file.getSelectedFile().getAbsolutePath();
            //devuelve meta del texto
            StyledDocument doc = (StyledDocument) jTextPane.getDocument();
            //convertir a richtext
            RTFEditorKit kit = new RTFEditorKit();
            BufferedOutputStream out;
            //errores
            try {
                out = new BufferedOutputStream(new FileOutputStream(nombreFile));
                //guardar inf al archivo
                kit.write(out, doc, doc.getStartPosition().getOffset(), doc.getLength());
                out.flush();
                out.close();
            } catch (Exception e) {

                System.out.println("Error: " + e.toString());
            }

        }
    }//GEN-LAST:event_jMenuItemGuardarActionPerformed

    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed

        if (!jTextPane.getText().isEmpty()) {
            int resp = JOptionPane.showConfirmDialog(null, "Desea guardar?");

            if (JOptionPane.OK_OPTION == resp) {
                jMenuItemGuardarActionPerformed(evt);

            } else if (JOptionPane.NO_OPTION == resp) {
                System.exit(1);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Hasta nunca y mÃ¡s alla :))");
        }
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    private void bRehacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRehacerActionPerformed
        try {
            if (undo.canRedo()) {
                undo.redo();
            }
        } catch (CannotUndoException exp) {
            exp.printStackTrace();
        }
    }//GEN-LAST:event_bRehacerActionPerformed

    private void jMenuItemDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDActionPerformed
        bDeshacerActionPerformed(evt);
    }//GEN-LAST:event_jMenuItemDActionPerformed

    private void jMenuItemRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRActionPerformed
        bRehacerActionPerformed(evt);
    }//GEN-LAST:event_jMenuItemRActionPerformed

    private void rbCursivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCursivaActionPerformed
        //jTextPane.setFont(new Font(cbFont.getSelectedItem().toString(),Font.ITALIC,Integer.parseInt(cbSize.getSelectedItem().toString())));
        int style = Font.PLAIN;
        if (rbCursiva.isSelected() && rbNegrita.isSelected()) {
            style = Font.ITALIC + Font.BOLD;
            //jTextPane.setFont(jTextPane.getFont().deriveFont(style));
            italics = true;
        } else if (rbCursiva.isSelected()) {
            style = Font.ITALIC;
            //jTextPane.setFont(jTextPane.getFont().deriveFont(style));
            italics = false;
        } else if (rbNegrita.isSelected()) {
            style = Font.BOLD;
            //jTextPane.setFont(jTextPane.getFont().deriveFont(style));
            italics = true;
        }
        jTextPane.setFont(jTextPane.getFont().deriveFont(style));
    }//GEN-LAST:event_rbCursivaActionPerformed

    private void rbNegritaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNegritaActionPerformed
        int style = Font.PLAIN;
        if (rbCursiva.isSelected() && rbNegrita.isSelected()) {
            style = Font.ITALIC + Font.BOLD;
            //jTextPane.setFont(jTextPane.getFont().deriveFont(style));
            bold = true;
        } else if (rbCursiva.isSelected()) {
            style = Font.ITALIC;
            //jTextPane.setFont(jTextPane.getFont().deriveFont(style));
            bold = false;
        } else if (rbNegrita.isSelected()) {
            style = Font.BOLD;
            //jTextPane.setFont(jTextPane.getFont().deriveFont(style));
            bold = true;
        }
        jTextPane.setFont(jTextPane.getFont().deriveFont(style));

    }//GEN-LAST:event_rbNegritaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Container container = frame.getContentPane();     

        Color color = JColorChooser.showDialog(null, "Seleccione un Color", Color.gray);
        jTextPane.setBackground(color);
        /*
        SimpleAttributeSet attributeSet = new SimpleAttributeSet();
        StyleConstants.setBackground(attributeSet, Color.white);
        jTextPane.setCharacterAttributes(attributeSet, true);
        jScrollPane.add(jTextPane);
         */
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        if (jCheckBoxMenuItem1.isSelected()) {
            rbNegrita.setEnabled(false);
            //rbNegrita.invalidate();
            rbCursiva.setEnabled(false);
            //rbCursiva.invalidate();

            jTextPane.setFont(new Font(cbFont.getSelectedItem().toString(), Font.PLAIN, jSlider1.getValue()));
        } else {
            rbNegrita.setEnabled(true);
            //rbNegrita.invalidate();
            rbCursiva.setEnabled(true);
            //rbCursiva.invalidate();
            rbNegritaActionPerformed(evt);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jMenuEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuEditActionPerformed

    private void jSlider1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSlider1KeyReleased

    }//GEN-LAST:event_jSlider1KeyReleased

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        int style = Font.PLAIN;
        if (rbCursiva.isSelected() && rbCursiva.isSelected()) {
            style = Font.BOLD + Font.ITALIC;
        } else if (rbCursiva.isSelected()) {
            style = Font.ITALIC;
        } else if (rbNegrita.isSelected()) {
            style = Font.BOLD;
        }
        jTextPane.setFont(new Font(cbFont.getSelectedItem().toString(), style, jSlider1.getValue()));
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (!jTextPane.getText().isEmpty()) {
            if (!jTextPane.getSelectedText().isEmpty()) {
                jTextArea1.setText(jTextArea1.getText()+"\n"+jTextPane.getSelectedText());
                
            }else{
                jTextArea1.setText(jTextPane.getText());
                jTextPane.setText("");
            }
            
        } else {
            JOptionPane.showConfirmDialog(null, "No tienes contenido en el JTextPane");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (!jTextArea1.getText().isEmpty()) {
            jTextPane.setText(jTextArea1.getText());
            //jTextArea1.setText("");
        } else {
            JOptionPane.showConfirmDialog(null, "No tienes contenido en el JTextArea");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bConcatenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConcatenarActionPerformed
        if (!jTextArea1.getText().isEmpty() || !jTextPane.getText().isEmpty() ) {
            String menaje =jTextPane.getText() +"\n"+ jTextArea1.getText() ;
            JOptionPane.showConfirmDialog(null, menaje);
        } else {
            JOptionPane.showConfirmDialog(null, "No tienes contenido");
        }
    }//GEN-LAST:event_bConcatenarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor_texto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor_texto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor_texto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor_texto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor_texto().setVisible(true);
            }
        });
    }
    private boolean bold;
    private boolean italics;
    private UndoManager undo;
    //private UndoManager rehacer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bColor;
    private javax.swing.JButton bConcatenar;
    private javax.swing.JButton bDeshacer;
    private javax.swing.JButton bRehacer;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbFont;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabelFont;
    private javax.swing.JLabel jLabelSize;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuIndex;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemD;
    private javax.swing.JMenuItem jMenuItemGuardar;
    private javax.swing.JMenuItem jMenuItemNuevo;
    private javax.swing.JMenuItem jMenuItemR;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JMenuItem jMenuItemX;
    private javax.swing.JMenuItem jMenuItemX2;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JRadioButton rbCursiva;
    private javax.swing.JRadioButton rbNegrita;
    // End of variables declaration//GEN-END:variables
}
